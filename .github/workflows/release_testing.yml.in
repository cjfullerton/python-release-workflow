name: release_testing

env:
  PYTHON_VERSION_BUMP: "3.10"
  PYTHON_VERSION_BUILD_EXES: "3.10"
  PYTHON_VERSION_RELEASE: "3.10"
  PYTHON_VERSION_BUILD_DOCS: "3.10"
  PYTHON_VERSION_UPDATE_WEB: "3.10"

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "PyInstaller log level"
        required: true
        default: "INFO"

jobs:
  build-executables:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, macos-11]
        include:
          - os: windows-2019
            executable_ext: .exe
            executable_os: win
          - os: macos-11
            executable_ext: ""
            executable_os: macOS

    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # get all history and tags

      - uses: actions/setup-python@v4
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION_BUILD_EXES }}{% endraw %}

      - name: Cache the virtualenv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: {% raw %}venv-build-${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}{% endraw %}

      - name: Install poetry
        run: python -m pip install poetry==1.2.2

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --without dev

      - name: Build with pyinstaller (non Windows, file)
        if: "!contains(matrix.os, 'windows')"
        working-directory: {{ pyinstaller_dir }}
        run: ./make.sh {{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }} INFO 'onefile'{% endraw %}
        
      - name: Build with pyinstaller (non Windows, folder)
        if: "!contains(matrix.os, 'windows')"
        working-directory: {{ pyinstaller_dir }}
        run: ./make.sh {{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }}-dir INFO 'onedir'{% endraw %}

      - name: Build with pyinstaller (Windows, file)
        if: contains(matrix.os, 'windows')
        working-directory: {{ pyinstaller_dir }}
        run: ./make.ps1 -ExeName "{{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }}" -LogLevel INFO -BuildType 'onefile'{% endraw %}

      - name: Build with pyinstaller (Windows, folder)
        if: contains(matrix.os, 'windows')
        working-directory: {{ pyinstaller_dir }}
        run: ./make.ps1 -ExeName "{{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }}-dir" -LogLevel INFO -BuildType 'onedir'{% endraw %}

      - name: Compress folder (Windows, folder)
        if: contains(matrix.os, 'windows')
        working-directory: {{ pyinstaller_dir }}
        run: ./compress.ps1 -ExeName "{{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }}-dir" -BuildType 'onedir'{% endraw %}
          
      - name: Upload executable artifact (file)
        uses: actions/upload-artifact@v3
        with:
          name: {{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }}${{ matrix.executable_ext }}{% endraw %}
          path: {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }}${{ matrix.executable_ext }}{% endraw %}

      - name: Upload executable artifact (folder)
        uses: actions/upload-artifact@v3
        with:
          name: {{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }}{% endraw %}-dir
          path: {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }}{% endraw %}-dir

      - name: Upload compressed artifact (folder)
        if: contains(matrix.os, 'windows')
        uses: actions/upload-artifact@v3
        with:
          name: {{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }}{% endraw %}-dir.zip
          path: {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-release-test-build-{% raw %}${{ matrix.executable_os }}{% endraw %}-dir.zip

  build-executables-linux:
    runs-on: ubuntu-latest
    container:
      image: aplowman/centos7-poetry
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set ownership
        run: |
          # see: https://github.com/actions/runner/issues/2033#issuecomment-1204205989
          # this is to fix GIT not liking owner of the checkout dir
          chown -R $(id -u):$(id -g) $PWD

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: {% raw %}venv-build-CentOS-${{ hashFiles('**/poetry.lock') }}{% endraw %}

      - name: Install dependencies
        run: poetry install --without dev

      - name: Build with pyinstaller for CentOS (file)
        working-directory: pyinstaller
        run: ./make.sh {{ executable_name }}-release-test-build-{% raw %}linux INFO onefile{% endraw %}

      - name: Build with pyinstaller for CentOS (folder)
        working-directory: pyinstaller
        run: ./make.sh {{ executable_name }}-release-test-build-{% raw %}linux-dir INFO onedir{% endraw %}

      - name: Upload executable artifact (file)
        uses: actions/upload-artifact@v3
        with:
          name: {{ executable_name }}-release-test-build-linux
          path: {{ pyinstaller_dir }}/dist/onefile/{{ executable_name }}-release-test-build-linux

      - name: Upload executable artifact (folder)
        uses: actions/upload-artifact@v3
        with:
          name: {{ executable_name }}-release-test-build-linux-dir
          path: {{ pyinstaller_dir }}/dist/onedir/{{ executable_name }}-release-test-build-linux-dir

  release-github:
    needs: [build-executables, build-executables-linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: {% raw %}${{ github.event.pull_request.base.ref }}{% endraw %} # otherwise we get the ref when the workflow started (missing above commit)

      - run: mkdir release-artifacts

      - uses: actions/download-artifact@v3
        id: download_executables
        with:
          name: hpcflow-release-test-build-macOS-dir

      - name: Display structure of downloaded files
        run: ls -R

      - uses: montudor/action-zip@v1
        with:
          args: zip -qq -r hpcflow-release-test-build-macOS-dir.zip hpcflow-release-test-build-macOS-dir 

      - name: Display structure of downloaded files
        run: ls -R

      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: test-tag 
          files: |
            hpcflow-release-test-build-macOS-dir.zip
          prerelease: true 
